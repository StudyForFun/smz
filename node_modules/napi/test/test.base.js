describe('#Base', function() {

    var classId = 'private'
    var objectId = 'f875057e60a14fbaa8306cbe56f7fb23'
    var publicClassId = 'news'
    var publicObjectId = '995d6e996b6044e7bc15b4f08eb42999'
    var publicListId = 'sub'
    var Private = napi.object(classId)
    var Public = napi.object(publicClassId)
    var Base = napi.base()

    describe('.send()', function() {
        it('Response object includes keys "_id", "_created_at"', function(done) {
            Base
                .sign('97287303713f49acbba3fbf6aa237241')
                .send({
                    method: 'GET',
                    url: '/classes/private/objects/' + objectId
                })
                .done(function(data) {
                    expect(data.data).to.be.an('object')
                    expect(data.data).to.include.keys('_id', '_created_at')
                    done()
                }, function(err) {
                    done(err)
                })
        })
        it('Response array each items include keys "_id", "_created_at"', function(done) {
            NAPI("hottopic")
                .base()
                .params({
                    _fetch: 1,
                    _objects: "å“¥",
                    _order: "desc"
                })
                .send({
                    url: '/classes/comments/search'
                })
                .done(function(data) {
                    expect(data.data).to.be.an('array')
                    data.data.forEach(function (item) {
                        expect(item).to.include.keys('_id', '_created_at')
                    })
                    done()
                }, function(err) {
                    done(err)
                })
        })
    });

    describe('.sign()', function() {
        it('Response object includes keys "_id", "_created_at"', function(done) {
            Private
                .sign('97287303713f49acbba3fbf6aa237241')
                .get(objectId)
                .done(function(data) {
                    expect(data.data).to.be.an('object')
                    expect(data.data).to.include.keys('_id', '_created_at')
                    done()
                }, function(err) {
                    done(err)
                })
        })
        it('Response error when pass a wrong sign', function(done) {
            Private
                .sign('unknow')
                .get(objectId)
                .done(function(data) {
                    done(new Error('Network limit uncorrectly !'))
                }, function(err) {
                    expect(err).to.include.keys('message', 'code')
                    expect(err.code).to.equal(20402)
                    done()
                })
        })
    })

    describe('.params()', function() {
        it('Response array those items without key "title" when set _fetch to 0', function(done) {
            Public
                .params({
                    _fetch: 0
                })
                .list(publicListId)
                .done(function(data) {
                    expect(data.data).to.be.an('array')
                    data.data.forEach(function(item) {
                        expect(item).to.not.include.keys('title')
                    })
                    done()
                }, function(err) {
                    done(err)
                })
        })
        it('Response object that includes keys "title", "content" when set _select to "title,content"', function(done) {
            Public
                .params({
                    _select: 'title,content'
                }).get(publicObjectId)
                .done(function(data) {
                    expect(data.data).to.be.an('object')
                    expect(data.data).to.include.keys('title', 'content')
                    done()
                }, function(err) {
                    done(err)
                })
        })
        it('Response object that without keys "title", "content" when set _deselect to "title,content" and _fetch=1', function(done) {
            Public
                .params({
                    _fetch: 1,
                    _deselect: 'title,content'
                }).get(publicObjectId)
                .done(function(data) {
                    expect(data.data).to.be.an('object')
                    expect(data.data).to.not.include.keys('title', 'content')
                    done()
                }, function(err) {
                    done(err)
                })
        })
    })

    describe('.fetch()', function() {
        it('Response array those items without key "title" when use fetch(false)', function(done) {
            Public
                .fetch(false)
                .list(publicListId)
                .done(function(data) {
                    expect(data.data).to.be.an('array')
                    data.data.forEach(function(item) {
                        expect(item).to.not.include.keys('title')
                    })
                    done()
                }, function(err) {
                    done(err)
                })
        })
        it('Response array those items includes key "title" when use fetch()', function(done) {
            Public
                .fetch()
                .list(publicListId)
                .done(function(data) {
                    expect(data.data).to.be.an('array')
                    data.data.forEach(function(item) {
                        expect(item).to.include.keys('title')
                    })
                    done()
                }, function(err) {
                    done(err)
                })
        })
    })

    describe('.fetchIncrs()', function() {
        it('Response object that includes key "_incrs" when use fetchIncrs()', function(done) {
            Public
                .fetchIncrs()
                .get(publicObjectId)
                .done(function(data) {
                    expect(data.data).to.be.an('object')
                    expect(data.data).to.include.keys('_incrs')
                    done()
                }, function(err) {
                    done(err)
                })
        })
        it('Response object that includes key "_incrs" when use fetchIncrs(true)', function(done) {
            Public
                .fetchIncrs(true)
                .get(publicObjectId)
                .done(function(data) {
                    expect(data.data).to.be.an('object')
                    expect(data.data).to.include.keys('_incrs')
                    done()
                }, function(err) {
                    done(err)
                })
        })
    })

    describe('.fetchVersion()', function() {
        it('Response object that includes key "_version" when use fetchVersion()', function(done) {
            Public
                .fetchVersion()
                .get(publicObjectId)
                .done(function(data) {
                    expect(data.data).to.be.an('object')
                    expect(data.data).to.include.keys('_version')
                    done()
                }, function(err) {
                    done(err)
                })
        })
        it('Response object that includes key "_version" when use fetchVersion(true)', function(done) {
            Public
                .fetchVersion(true)
                .get(publicObjectId)
                .done(function(data) {
                    expect(data.data).to.be.an('object')
                    expect(data.data).to.include.keys('_version')
                    done()
                }, function(err) {
                    done(err)
                })
        })
    })

    describe('.fetchTotal()', function() {
        it('Response metadata object that includes key "total" when use fetchTotal()', function(done) {
            Public
                .fetch()
                .fetchTotal()
                .list(publicListId)
                .done(function(data) {
                    expect(data.metadata).to.be.an('object')
                    expect(data.metadata).to.include.keys('total')
                    done()
                }, function(err) {
                    done(err)
                })
        })
    })

    describe('.select()', function() {
        it('Response object that includes keys "title", "content" when use select("title", "content")', function(done) {
            Public
                .select('title', 'content')
                .get(publicObjectId)
                .done(function(data) {
                    expect(data.data).to.be.an('object')
                    expect(data.data).to.include.keys('title', 'content')
                    done()
                }, function(err) {
                    done(err)
                })
        })
    })

    describe('.deselect()', function() {
        it('Response object that without keys "title", "content" when use deselect("title", "content") and fetch()', function(done) {
            napi.object(publicClassId)
                .fetch()
                .deselect('title', 'content')
                .get(publicObjectId)
                .done(function(data) {
                    expect(data.data).to.be.an('object')
                    expect(data.data).to.not.include.keys('title', 'content')
                    done()
                }, function(err) {
                    done(err)
                })
        })
    })
    describe('.etag()', function() {
        it('Enable Etag without error', function(done) {
            napi.object(publicClassId)
                .etag()
                .get(publicObjectId)
                .done(function(data) {
                    expect(data.data).to.be.an('object')
                    done()
                }, function(err) {
                    done(err)
                })
        })

        it('Disable Etag without error', function(done) {
            napi.object(publicClassId)
                .etag(false)
                .get(publicObjectId)
                .done(function(data) {
                    expect(data.data).to.be.an('object')
                    done()
                }, function(err) {
                    done(err)
                })
        })
    })
    describe('.maxAge()', function() {
        it('Enable MaxAge without error', function(done) {
            napi.object(publicClassId)
                .maxAge(1000)
                .get(publicObjectId)
                .done(function(data) {
                    expect(data.data).to.be.an('object')
                    done()
                }, function(err) {
                    done(err)
                })
        })

        it('Disable MaxAge without error', function(done) {
            napi.object(publicClassId)
                .maxAge(1000)
                .get(publicObjectId)
                .done(function(data) {
                    expect(data.data).to.be.an('object')
                    done()
                }, function(err) {
                    done(err)
                })
        })
    })

    describe('.query()', function() {
        it('Response array those items without key "title" when use query({_fetch: 0})', function(done) {
            Public
                .query({
                    _fetch: 0
                })
                .list(publicListId)
                .done(function(data) {
                    expect(data.data).to.be.an('array')
                    data.data.forEach(function(item) {
                        expect(item).to.not.include.keys('title')
                    })
                    done()
                }, function(err) {
                    done(err)
                })
        })
        it('Response array those items includes key "title" when use query({_fetch: 1})', function(done) {
            Public
                .query({
                    _fetch: 1
                })
                .list(publicListId)
                .done(function(data) {
                    expect(data.data).to.be.an('array')
                    data.data.forEach(function(item) {
                        expect(item).to.include.keys('title')
                    })
                    done()
                }, function(err) {
                    done(err)
                })
        })
    })
})
