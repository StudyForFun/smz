/**
 *  Objects
 */
describe('#Objects', function() {

    var classId = 'news'
    var objectId = '995d6e996b6044e7bc15b4f08eb42999'
    var categoriyId = 'index'
    var listId = 'sub'
    var field = 'yes'
    var News = napi.object(classId)

    describe('.get()', function() {
        it('Response object includes keys "_id", "_created_at"',
            function(done) {
                News.get(objectId)
                    .done(function(data) {
                        expect(data.data).to.be.an('object')
                        expect(data.data).to.include.keys('_id', '_created_at')
                        done()
                    }, function(err) {
                        done(err)
                    })
            }
        )
    })
    describe('.post()', function() {
        it('Response object includes keys "_id"',
            function(done) {
                News.body({
                        'name': 'switer',
                        'content': Math.random()
                    })
                    .post()
                    .done(function(data) {
                        expect(data.data).to.be.an('object')
                        expect(data.data).to.include.keys('_id')
                        done()
                    }, function(err) {
                        done(err)
                    })
            }
        )
        it('Response object includes keys "_id","name","content","title" when use post(body, list)',
            function(done) {
                News
                    .body({
                        'name': 'switer',
                        'content': Math.random(),
                        'title': 'test-post()-to-list'
                    })
                    .post('sub')
                    .then(function(data) {
                        expect(data.data).to.be.an('object')
                        expect(data.data).to.include.keys('_id')
                        return News.fetch().get(data.data._id)
                    }, function(err) {
                        done(err || 'Post error')
                    })
                    .done(function (data) {
                        expect(data.data).to.be.an('object')
                        expect(data.data).to.include.keys('_id', 'name', 'content', 'title')
                        done()
                    }, function (err) {
                        done(err || 'Get error')
                    })
            }
        )
        it('Response object includes keys "_id","name","content","title" when use post(body, category, list)',
            function(done) {
                News
                    .body({
                        'name': 'switer',
                        'content': Math.random(),
                        'title': 'test-post()-to-list'
                    })
                    .post('index', 'sub')
                    .then(function(data) {
                        expect(data.data).to.be.an('object')
                        expect(data.data).to.include.keys('_id')
                        return News.fetch().get(data.data._id)
                    }, function(err) {
                        done(err || 'Post error')
                    })
                    .done(function (data) {
                        expect(data.data).to.be.an('object')
                        expect(data.data).to.include.keys('_id', 'name', 'content', 'title')
                        done()
                    }, function (err) {
                        done(err || 'Get error')
                    })
            }
        )
    })
    describe('.create()', function() {
        it('Create object success with specified "_id"',
            function(done) {
                var _id = '12345'
                News.body({
                        'name': 'switer',
                        'content': Math.random()
                    })
                    .create(_id)
                    .done(function(data) {
                        News.get(_id).done(function (result) {
                            expect(result.data).to.be.an('object')
                            expect(result.data.name).to.be.an('string')
                            done()
                        })

                    }, function(err) {
                        done(err)
                    })
            }
        )
    })
    describe('.put()', function() {
        it('Response object without keys "content"', function(done) {
            News
                .body({
                    'name': 'switer',
                    'content': Math.random()
                })
                .post()
                .then(function (data) {
                expect(data.data).to.be.an('object')
                expect(data.data).to.include.keys('_id')
                return News.body({
                    'name': 'switer2'
                }).put(data.data._id)
            }, function (err) {
                done(err || 'Post error')
            })
            .then(function (data) {
                expect(data.data).to.be.an('object')
                return News.fetch().get(data.data._id)
            }, function (err) {
                done(err || 'Put error')
            })
            .done(function(data) {
                expect(data.data).to.be.an('object')
                expect(data.data).to.not.include.keys('content')
                done()
            }, function(err) {
                done(err)
            })
        })
    })


    describe('.patch()', function() {
        it('Response object with keys "name","content"', function(done) {
            News
                .body({
                    'name': 'switer'
                })
                .post()
                .then(function (data) {
                expect(data.data).to.be.an('object')
                expect(data.data).to.include.keys('_id')
                return News.body({
                    'content': Math.random()
                }).patch(data.data._id)
            }, function (err) {
                done(err || 'Post error')
            })
            .then(function (data) {
                expect(data.data).to.be.an('object')
                return News.fetch().get(data.data._id)
            }, function (err) {
                done(err || 'Patch error')
            })
            .done(function(data) {
                expect(data.data).to.be.an('object')
                expect(data.data).to.include.keys('name', 'content')
                done()
            }, function (err) {
                done(err || 'Get error')
            })
        })
    })
    describe('.delete()', function() {
        it('Response object with keys "name","content"', function(done) {
            var objectId
            News
                .body({
                    'name': 'switer'
                })
                .post()
                .then(function (data) {
                expect(data.data).to.be.an('object')
                expect(data.data).to.include.keys('_id')
                objectId = data.data._id
                return News.delete(data.data._id)
            })
            .then(function (data) {
                expect(data.data).to.be.an('object')
                return News.fetch().get(objectId)
            })
            .done(function(data) {
                done(new Error('Object ' + objectId + ' should be deleted !'))
            }, function(err) {
                expect(err).to.be.an('object')
                expect(err.code).to.be.equal(20102)
                done()
            })
        })
    })

    describe('.list()', function() {
        it('Response array',
            function(done) {
                News.list(listId)
                    .done(function(data) {
                        expect(data.data).to.be.an('array')
                        done()
                    }, function(err) {
                        done(err)
                    })
            }
        )
        it('Response array each items include key "_incrs"',
            function(done) {
                News.fetch()
                    .fetchIncrs()
                    .list(listId)
                    .done(function(data) {
                        expect(data.data).to.be.an('array')
                        data.data.forEach(function (item) {
                            expect(item).to.include.keys('_incrs')
                        })
                        done()
                    }, function(err) {
                        done(err)
                    })
            }
        )
        it('Response object array',
            function(done) {
                News.list(categoriyId, listId).done(function(data) {
                    expect(data.data).to.be.an('array')
                    done()
                }, function(err) {
                    done(err)
                })
            }
        )
        it('Response object array when get all objects',
            function(done) {
                News.list().done(function(data) {
                    expect(data.data).to.be.an('array')
                    done()
                }, function(err) {
                    done(err)
                })
            }
        )
    })

    describe('.incrs()', function() {
        it('Response an object',
            function(done) {
                News.incrs(objectId, field).done(function(data) {
                    expect(data.data).to.be.an('object')
                    done()
                }, function(err) {
                    done(err)
                })
            }
        )
    })
    describe('.getIncrs()', function() {
        it('Response object that has keys "yes" typeOf number',
            function(done) {
                News.getIncrs(objectId, field).done(function(data) {
                    expect(data.data).to.be.an('object')
                    expect(data.data).to.be.include.keys('yes')
                    expect(data.data.yes).to.be.a('number')
                    done()
                }, function(err) {
                    done(err)
                })
            }
        )
    })

})
