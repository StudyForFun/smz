/**
 *  Recommended
 */

var util = require('util');
var API = require('./base.js');
var fns = require('./functions')

var APIv3 = function(appID, host, classID) {
    API.call(this, appID, host);
    this._version = '3';
    this._missing('classID', classID);
    this._classID = classID;
};

util.inherits(APIv3, API);

function getUrl () {
    this._check('_host', '_appID', '_version');
    return [this._host, this._version].concat([].slice.call(arguments)).join('/');
};

/**
 *  返回request的qs选项，第三版默认加上_app_id
 *  @override base._getRequestParams
 *  @returns {Object}
 */
APIv3.prototype._getRequestParams = function() {
    this._params._app_id = this._appID;
    return this._params;
};

/**
 *  获取某个对象
 *  @param objectID {String}
 *  @returns {Promise}
 */
APIv3.prototype.get = function(objectID) {
    this._missing('objectID', objectID);
    return this.request({
        method: 'GET',
        url: getUrl.call(this, 'classes', this._classID, 'objects', objectID)
    });
};

/**
 *  获取列表下的全部对象， 或者 获取二级列表下的对象
 *  @param categoryID {String} Option
 *  @param listID {String} Option
 *  @returns {Promise}
 */
APIv3.prototype.list = function(/*categoryID, listID*/) {
    var args = fns.slice(arguments);
    var categoryID, listID;

    if (args.length >= 2) {
        // 二级列表
        categoryID = args[0];
        listID = args[1]
        this._missing('categoryID', categoryID);
        this._missing('listID', listID);
        return this.request({
            method: 'GET',
            url: getUrl.call(this, 'classes', this._classID,'categories', categoryID, 'lists', listID)
        });

    } else if (args.length == 1) {
        // 一级列表
        listID = args[0]
        this._missing('listID', listID);
        return this.request({
            method: 'GET',
            url: getUrl.call(this, 'classes', this._classID, 'lists', listID)
        });
    } else {
        return this.request({
            method: 'GET',
            url: getUrl.call(this, 'classes', this._classID, 'objects')
        });
    }
};

/**
 *  新增一个对象
 *  @param category {String} Option
 *  @param list {String} Option
 *  @returns {Promise}
 */
APIv3.prototype.post = function(/*category, list*/) {
    var args = fns.slice(arguments);
    var body = this.getBody();
    !body._lists && (body._lists = []);
    switch (args.length) {
        case 1:
            this._missing('list', args[0]);
            body._lists.push({
                list_id: args[0],
                score: +new Date
            });
            break;
        case 2:
            this._missing('category', args[0]);
            this._missing('list', args[1]);
            body._lists.push({
                category_id: args[0],
                list_id: args[1],
                score: +new Date
            });
            break;
    }
    return this.request({
        method: 'POST',
        url: getUrl.call(this, 'classes', this._classID, 'objects')
    });
};

/**
 *  新增一个对象，可以指定对象id
 *  @param objectId {String} Option
 *  @param category {String} Option
 *  @param list {String} Option
 *  @returns {Promise}
 */
APIv3.prototype.create = function(/*objectId, category, list*/) {
    var args = fns.slice(arguments);
    var body = this.getBody();
    !body._lists && (body._lists = []);

    var objectId
    switch (args.length) {
        case 1:
            objectId = args[0]
            this._missing('objectId', objectId);
            break
        case 2:
            objectId = args[0]
            this._missing('objectId', objectId);
            this._missing('list', args[1]);
            body._lists.push({
                list_id: args[1],
                score: +new Date
            });
            break;
        case 3:
            objectId = args[0]
            this._missing('objectId', objectId);
            this._missing('category', args[1]);
            this._missing('list', args[2]);
            body._lists.push({
                category_id: args[1],
                list_id: args[2],
                score: +new Date
            });
            break;
    }

    var parts = ['classes', this._classID, 'objects']
    objectId && parts.push(objectId)
    return this.request({
        method: 'POST',
        url: getUrl.apply(this, parts)
    });
};
/**
 *  全量更新一个对象内容
 *  @param objectID {String}
 *  @returns {Promise}
 */
APIv3.prototype.put = function(objectID) {
    this._missing('objectID', objectID);
    return this.request({
        method: 'PUT',
        url: getUrl.call(this, 'classes', this._classID, 'objects', objectID)
    });
};

/**
 *  增量更新一个对象内容
 *  @param objectID {String}
 *  @returns {Promise}
 */
APIv3.prototype.patch = function(objectID) {
    this._missing('objectID', objectID);
    return this.request({
        method: 'PATCH',
        url: getUrl.call(this, 'classes', this._classID, 'objects', objectID)
    });
};

/**
 *  删除一个对象内容
 *  @param objectID {String}
 *  @returns {Promise}
 */
APIv3.prototype.delete = function(objectID) {
    this._missing('objectID', objectID);
    return this.request({
        method: 'DELETE',
        url: getUrl.call(this, 'classes', this._classID, 'objects', objectID)
    });
};

/**
 *  计数器 +1
 *  @param objectID {String}
 *  @param field {String}
 *  @returns {Promise}
 */
APIv3.prototype.incrs = function(objectID, field) {
    this._missing('objectID', objectID);
    this._missing('field', field);
    return this.request({
        method: 'POST',
        url: getUrl.call(this, 'classes', this._classID, 'objects', objectID, 'incrs', field)
    });
};

/**
 *  获取计数器
 *  @param objectID {String}
 *  @returns {Promise}
 */
APIv3.prototype.getIncrs = function(objectID) {
    this._missing('objectID', objectID);
    return this.request({
        method: 'GET',
        url: getUrl.call(this, 'classes', this._classID, 'objects', objectID, 'incrs')
    });
};

module.exports = APIv3;
