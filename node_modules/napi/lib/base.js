var request = require('request');
var Promise = require('promise');
var crypto = require('crypto');
var Url = require('url');
var fns = require('./functions');

function NOOP () {}

function md5(data) {
    var md5sum = crypto.createHash('md5');
    md5sum.update(data, 'utf8');
    return md5sum.digest('hex');
}

/**
 * 构造函数
 * @param appID {String}
 * @param host {String|null}
 * @constructor
 */
var API = function(appID, host) {
    if (!appID) {
        throw new Error('missing app id');
    }
    this._appID = appID;
    this._params = {};
    this._body = {};
    this._appKey = false;
    if (host) {
        this._host(host);
    }
};

/**
 * 设置host
 * @private
 * @param host
 * @returns {API}
 */
API.prototype._host = function(host) {
    this._host = host.replace(/\/$/, '');
    return this;
};

/**
 * 请求生成签名
 * @param appKey {String}
 * @returns {API}
 */
API.prototype.sign = function(appKey) {
    this._missing('appKey', appKey);
    this._appKey = appKey;
    return this;
};

/**
 * 设置请求中的 queryString 参数
 * @param params {Object}
 * @returns {API}
 */
API.prototype.params = function(params) {
    if (typeof params === 'object') {
        this._params = fns.merge(this._getRequestParams(), params);
    } else {
        throw new Error('invalid params');
    }
    return this;
};

/**
 * 设置请求体内容，只用于 POST/PUT/PATCH/DELETE
 * @param body {Object}
 * @returns {API}
 */
API.prototype.body = function(body) {
    if (typeof body === 'object') {
        this._body = body;
    } else {
        throw new Error('Invalid body params');
    }
    return this;
};

/**
 * 是否启用用数据接口 Etag 缓存
 * @param value {Boolean}
 * @returns {API}
 */
API.prototype.etag = function(value) {
    this._setRequestOption('_etag', arguments.length == 0 || value ? 1 : 0);
    return this;
};
/**
 * 是否返回对象全部字段
 * @param value {Boolean}
 * @returns {API}
 */
API.prototype.fetch = function(value) {
    this._setRequestOption('_fetch', arguments.length == 0 || value ? 1 : 0);
    return this;
};
/**
 * 是否返回对象关联的计数器
 * 如果选择返回，将会在对象里包含一个键为 `_incrs` 的字典。可选
 * @param value {Boolean}
 * @returns {API}
 */
API.prototype.fetchIncrs = function(value) {
    this._setRequestOption('_fetch_incrs', arguments.length == 0 || value ? 1 : 0);
    return this;
};
/**
 * 是否返回对象的协同编辑版本
 * 如果选择返回，将会在对象里包含一个键为 `_version`
 * @param value {Boolean}
 * @returns {API}
 */
API.prototype.fetchVersion = function(value) {
    this._setRequestOption('_fetch_version', arguments.length == 0 || value ? 1 : 0);
    return this;
};
/**
 * 是否返回总数
 * @param value {Boolean}
 * @returns {API}
 */
API.prototype.fetchTotal = function(value) {
    this._setRequestOption('_fetch_total', arguments.length == 0 || value ? 1 : 0);
    return this;
};

/**
 * 指定只需要返回的字段
 * 多个字段用英文逗号(,)分割。
 * @params keys {String}
 * @returns {API}
 */
API.prototype.select = function(/*key1, key2, ..., keyN*/) {
    var args = fns.slice(arguments);
    var options = this._getRequestOptions();
    this._setRequestOption('_select', args.join(','));
    return this;
};
/**
 * 指定不返回的字段
 * 多个字段用英文逗号(,)分割。
 * @params keys {String}
 * @returns {API}
 */
API.prototype.deselect = function(/*key1, key2, ..., keyN*/) {
    var args = fns.slice(arguments);
    var options = this._getRequestOptions();
    this._setRequestOption('_deselect', args.join(','));
    return this;
};

/**
 * 设置请求API的 缓存时间, 单位为秒。默认为 0
 * @param age {Number}
 * @returns {API}
 */
API.prototype.maxAge = function(age) {
    this._setRequestOption('_max_age', age || 0);
    return this;
};

/**
 * 最大返回的结果数量，默认 10，最大 200。
 * @param size {Number}
 * @returns {API}
 */
API.prototype.size = function(size) {
    this._setRequestOption('_size', size || 10);
    return this;
};
/**
 * 查询第几页的数据
 * @param page {Number}
 * @returns {API}
 */
API.prototype.page = function(page) {
    this._setRequestOption('_page', page || 1);
    return this;
};
/**
 * 查询比 pos 值前的数据
 * @param pos {Number}
 * @returns {API}
 */
API.prototype.sincePos = function(pos) {
    this._setRequestOption('_since_pos', pos);
    return this;
};

/**
 * 查询比 pos 值后的数据
 * @param pos {Number}
 * @returns {API}
 */
API.prototype.maxPos = function(pos) {
    this._setRequestOption('_max_pos', pos);
    return this;
};

/**
 * 设置查询参数，QueryString
 * @param pos {Number}
 * @returns {API}
 */
API.prototype.query = function(queries) {
    var keys = Object.keys(queries)
    keys.forEach(function (k) {
        this._setRequestOption(k, queries[k]);
    }.bind(this))
    return this;
};

/**
 * 返回request的qs选项
 * @protected
 * @returns {Object}
 */
API.prototype._getRequestParams = function() {
    return this._params || {};
};

/**
 * 返回request请求的body
 * @returns {Object}
 */
API.prototype.getBody = function(){
    if(!this._body){
        this._body = {};
    }
    return this._body;
};

/**
 * 返回 NAPI 的qs选项对象
 * @returns {Object}
 * @private
 */
API.prototype._getRequestOptions = function() {
    return this._options || {};
};
/**
 * 设置 NAPI 的qs选项
 * @private
 * @returns {Object}
 */
API.prototype._setRequestOption = function(field, value) {
    if (!this._options) this._options = {};
    this._options[field] = value;
    return this;
};

/**
 * 返回body的序列化内容
 * @private
 * @returns {String}
 */
API.prototype._getRequestBodies = function() {
    return JSON.stringify(this._body);
};

/**
 * 校验参数
 * @protected
 */
API.prototype._check = function() {
    for (var i = 0; i < arguments.length; i++) {
        var key = arguments[i];
        this._missing(key, this.hasOwnProperty(key));
    }
};

/**
 * 参数校验报错
 * @protected
 * @param name {String}
 * @param value {*}
 */
API.prototype._missing = function(name, value) {
    if (!value) {
        throw new Error('missing ' + name.replace(/^_/, ''));
    }
};

/**
 * promise的handler
 * @param resolve {Function}
 * @param reject {Function}
 * @returns {Function}
 */
function requestHandler(resolve, reject) {
    return function(error, response, body) {
        if (!error && response.statusCode == 200) {
            try {
                var data = JSON.parse(body);
                error = data.error;
                if (error && error.code) {
                    error.type = 'api';
                    err.statusCode = response.statusCode;
                    reject(error);
                } else {
                    resolve(data);
                }
            } catch (err) {
                err.type = 'parser';
                err.statusCode = response.statusCode;
                reject(err);
            }
        } else {
            if (body) {
                try {
                    // 使用数据段的错误回报
                    error = JSON.parse(body).error;
                    error.type = 'api';
                    error.code = error.code || response.statusCode;
                } catch (e) {
                    error = null
                }
                if (!error) {
                    // 使用 HTTP 的错误回报
                    error = {
                        message: 'HTTP [' + response.statusCode + '] error'
                    }
                    error.type = 'http';
                    error.code = response.statusCode;
                }
                error.statusCode = response.statusCode;
                reject(error);
            }
        }
    }
}

/**
 * 发起请求，返回Promise对象
 * @param options {Object}
 * @returns {Promise}
 */
API.prototype.request = function(options) {
    options = options || {};
    options.method = (options.method || '').toUpperCase();
    if (~['POST', 'PUT', 'PATCH', 'DELETE'].indexOf(options.method)) {
        var headers = options.headers || {};
        headers['Content-Type'] = 'application/json;charset=UTF-8';
        options.headers = headers;
    }
    var qs = this._getRequestParams();
    var opts = fns.merge({}, this._getRequestOptions());
    qs = fns.merge(opts, qs);

    if (this._appKey) {
        qs._time_stamp = Math.floor(Date.now() / 1000);
        var seed = [];
        seed.push(this._appKey);
        seed.push(options.method);
        seed.push(encodeURIComponent(Url.parse(options.url || options.uri).pathname));
        seed.push((function(qs) {
            var ret = [];
            for (var key in qs) {
                if (qs.hasOwnProperty(key)) {
                    ret.push(key + '=' + qs[key]);
                }
            }
            return encodeURIComponent(ret.join('&'));
        })(qs));
        qs._sign = md5(seed.join('&'));
    }
    options.qs = qs;
    options.body = this._getRequestBodies();
    // 请求后清空参数与选项
    this._params = {};
    this._body = {};
    this._options = {};
    this._appKey = false;

    var version = this._version;
    return new Promise(function(resolve, reject) {
        var success = resolve || NOOP
        var fail = reject || NOOP
        var MAX_BUSY_RETRY_TIMES = 3

        function _send (times) {
            times = times || 0
            request(options, 
                requestHandler(
                    function (data) {
                        var items = data.data.items;
                        if (version == '2' && items) {
                            data.metadata = data.data.metadata;
                            if (!items.length) items = [];
                            data.data = items;
                        }
                        success(data);
                    }, 
                    function (err) {
                        if (err.statusCode == 503 && times < MAX_BUSY_RETRY_TIMES) {
                            // NAPI 服务器繁忙，作重试 @汝锋
                            return _send(++times);
                        }
                        fail.apply(null, arguments);
                    }
                )
            );
        }
        _send();
    });
};
module.exports = API;
