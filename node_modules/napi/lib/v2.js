/**
 *  Deprecated
 */
var util = require('util');
var API = require('./base.js');

var APIv2 = function(appID, host) {
    API.call(this, appID, host);
    this._version = '2';
};

util.inherits(APIv2, API);

function getUrl () {
    this._check('_host', '_appID', '_version');
    return [this._host, this._version, this._appID].concat([].slice.call(arguments)).join('/');
};

/**
 * 获取评论
 * @param category {String}
 * @param thread {String}
 * @returns {Promise}
 */
APIv2.prototype.listComment = function(category, thread) {
    this._missing('category', category);
    this._missing('thread', thread);
    return this.request({
        method: 'GET',
        url: getUrl.call(this, 'comments', category, thread)
    });
};

/**
 * 发表评论
 * @param category {String}
 * @param thread {String}
 * @returns {Promise}
 */
APIv2.prototype.postComment = function(category, thread) {
    this._missing('category', category);
    this._missing('thread', thread);
    return this.request({
        method: 'POST',
        url: getUrl.call(this, 'comments', category, thread)
    });
};

/**
 * 回复评论
 * @param category {String}
 * @param thread {String}
 * @param commentID {String}
 * @returns {Promise}
 */
APIv2.prototype.replyComment = function(category, thread, commentID) {
    this._missing('category', category);
    this._missing('thread', thread);
    this._missing('commentID', commentID);
    return this.request({
        method: 'POST',
        url: getUrl.call(this, 'comments', category, thread, commentID, 'reply')
    });
};

/**
 * 赞评论
 * @param category {String}
 * @param thread {String}
 * @param commentID {String}
 * @returns {Promise}
 */
APIv2.prototype.likeComment = function(category, thread, commentID) {
    this._missing('category', category);
    this._missing('thread', thread);
    this._missing('commentID', commentID);
    return this.request({
        method: 'POST',
        url: getUrl.call(this, 'comments', category, thread, commentID, 'like')
    });
};

/**
 * 获取对象
 * @param classID {String}
 * @param objectID {String}
 * @returns {Promise}
 */
APIv2.prototype.getObject = function(classID, objectID) {
    this._missing('classID', classID);
    this._missing('objectID', objectID);
    return this.request({
        method: 'GET',
        url: getUrl.call(this, 'classes', classID, objectID)
    });
};

/**
 * 获取列表下的对象
 * @param classID {String}
 * @param listID {String}
 * @returns {Promise}
 */
APIv2.prototype.listObject = function(classID, listID) {
    this._missing('classID', classID);
    this._missing('listID', listID);
    return this.request({
        method: 'GET',
        url: getUrl.call(this, 'classes', classID, 'lists', listID)
    });
};
/**
 * 获取列表下的全部对象
 * @param classID {String}
 * @param listType {String}
 * @param listID {String}
 * @returns {Promise}
 */
APIv3.prototype.getLists = function(classID, listID) {
    this._missing('classID', classID);
    this._missing('listID', listID);
    return this.request({
        method: 'GET',
        url: getUrl.call(this, 'classes', classID, 'lists', listID)
    });
};
/**
 * 获取二级列表下的对象
 * @param classID {String}
 * @param listType {String}
 * @param listID {String}
 * @returns {Promise}
 */
APIv2.prototype.getSubLists = function(classID, categoryID, listID) {
    this._missing('classID', classID);
    this._missing('categoryID', categoryID);
    this._missing('listID', listID);
    return this.request({
        method: 'GET',
        url: getUrl.call(this, 'classes', classID, 'lists', categoryID, listID)
    });
};

/**
 * 累加计数器
 * @param classID {String}
 * @param objectID {String}
 * @param field {String}
 * @returns {Promise}
 */
APIv2.prototype.incrs = function(classID, objectID, field) {
    this._missing('classID', classID);
    this._missing('objectID', objectID);
    this._missing('field', field);
    return this.request({
        method: 'POST',
        url: getUrl.call(this, 'classes', classID, objectID, 'incrs', field)
    });
};

/**
 * 获取计数器
 * @param classID {String}
 * @param objectID {String}
 * @returns {Promise}
 */
APIv2.prototype.listIncrs = function(classID, objectID) {
    this._missing('classID', classID);
    this._missing('objectID', objectID);
    return this.request({
        method: 'GET',
        url: getUrl.call(this, 'classes', classID, objectID, 'incrs')
    });
};

module.exports = APIv2;
